#!/usr/bin/env zsh

function update() {
    # 更新 wzsh
    cd ~/.zsh && proxyon
    git pull && git submodule update --init --recursive
    proxyoff && cd - && zsh
}

function conf() {
    # 打开配置文件
    cd ${WZSH_HOME}
    vim
    cd -
}

function env() {
    # 设置获取 wzsh 环境
    local envfile=~/.wzshenv
    if [[ -f $envfile ]]
    then
        cat $envfile
    fi
}

function setenv() {
    # 设置 wzsh 环境
    local envfile=~/.wzshenv
    echo $1 > $envfile
}

function __get_plugin_dir() {
    # 获取插件目录
    local name=$1
    dirname=${WZSH_HOME}/plugins/wzsh-${name}
    echo $dirname
}

function __conf_plugin() {
    # 编辑插件
    local name=$1
    dirname=$(__get_plugin_dir $name)
    if [[ -d ${dirname} ]]
    then
    else
        zwarn "插件 $name 不存在"
        return
    fi
    cd $dirname
    vim
    cd -
}

function __create_plugin() {
    # 创建插件
    name=$1
    if [[ ! $name ]]
    then
        zerror "缺少参数 {name}"
        return
    fi
    dirname=${WZSH_HOME}/plugins/wzsh-${name}
    zinfo "创建插件 wzsh-${name}"
    [[ -d $dirname ]] || mkdir $dirname
    touch $dirname/aliases.zsh
    zinfo "Create $dirname/aliases.zsh"
    echo '. ${WZSH_HOME}/plugins/wzsh-'${name}'/aliases.zsh' > $dirname/wzsh-${name}.zsh
    zinfo "Create $dirname/wzsh-${name}.zsh"
}

function __remove_plugin() {
    # 移除插件
    local name=$1
    dirname=$(__get_plugin_dir $name)
    if [[ -d ${dirname} ]]
    then
    else
        zwarn "插件 $name 不存在"
        return
    fi
    case $action in
        [yY][eE][sS]|[yY])
            echo "Yes"
            ;;

        [nN][oO]|[nN])
            echo "No"
            ;;

        *)
            echo "Invalid input..."
            exit 1
            ;;
    esac
    # rm -rf $dirname
}

function __debug_plugin() {
    # 调试插件程序
    local name=$1
    shift
    local filepath=${WZSH_HOME}/plugins/wzsh-${name}/wzsh-${name}.zsh
    if [[ ! -f $filepath ]]
    then
        filepath=${WZSH_HOME}/plugins/wzsh-${name}/zshrc
        if [[ ! -f $filepath ]]
        then
            zerror "${name} 插件不存在"
            return
        fi
    fi

    /bin/zsh ${filepath} $@
}

function __home_plugin() {
    # 插件 home 目录
    echo $(__get_plugin_dir $1)
}

function __init_plugin() {
    # 插件 home 目录
    local init_path=$(__get_plugin_dir $1)/init.zsh
    if [[ ! -f $init_path ]]
    then
        zerror "缺少脚本 ${init_path}" ;
        return;
    fi

    zsh $init_path
}

function plugin() {
    # 插件相关操作
    # create 创建插件
    # conf 编辑插件
    # debug 调试插件
    # remove 移除插件
    # home 插件目录
    # init 初始化目录

    local action=$1
    shift
    case $action in
        'create')
            __create_plugin $@
            ;;

        'conf')
            __conf_plugin $@
            ;;
        'remove')
            __remove_plugin $@
            ;;
        'debug')
            __debug_plugin $@
            ;;
        'home')
            __home_plugin $@
            ;;
        'init')
            __init_plugin $@
            ;;

        *)
            zwarn "暂不支持 $action 指令"
            return
            ;;
    esac
}

function debug() {
    # 调试程序
    local name=$1
    shift
    local filepath=${WZSH_HOME}/lib/${name}.zsh
    if [[ ! -f $filepath ]]
    then
        filepath=${WZSH_HOME}/lib/zshrc
        if [[ ! -f $filepath ]]
        then
            zerror "${name} 插件不存在"
            return
        fi
    fi

    /bin/zsh ${filepath} $@
}


if [[ $* ]]
then
    # shell main 函数
    # ./xxxx.sh func_name params1 params2
    # 就是运行 func_name 函数并传入 params1 params2 两个参数
    local cmd="$1"
    # 将参数左移一位
    shift
    local rc=0
    $cmd "$@" || rc=$?
    return $rc
fi
